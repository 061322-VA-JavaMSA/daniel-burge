package com.revature.daos;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

import com.revature.connectionutil.ConnectionUse;
import com.revature.models.Store;
import com.revature.models.User;

public class StorePostgres implements StoreDao {

	@Override
	public Store create(Store s) {
		String sql = "insert into store (genre, game,price) values (?,?,?) returning id;";
		try(Connection c = (ConnectionUse.getConnectionFromEnv())){
			PreparedStatement ps = c.prepareStatement(sql);
			ps.setString(1, s.getGenre());
			ps.setString(2, s.getGame());
			ps.setDouble(3, s.getPrice());
			
			ResultSet rs = ps.executeQuery(); // return the id generated by the database
			if(rs.next()) {
				s.setId(rs.getInt("id"));
			}
			
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		return s;
	}

	@Override
	public Store retrieveStoreById(int id) {
		String sql = "select * from store where id = ?;";
		Store store = null;
		
		try(Connection c = (ConnectionUse.getConnectionFromEnv())){
			PreparedStatement ps = c.prepareStatement(sql);
			
			ps.setInt(1, id); // this refers to the 1st ? in the sql String
			
			ResultSet rs = ps.executeQuery();
			
			if(rs.next()) {
				store = new Store();
				store.setId(rs.getInt("id"));
				store.setGenre(rs.getString("username"));
				store.setGame(rs.getString("password"));
				store.setPrice(rs.getDouble("price"));
			}
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return store;}

	@Override
	public List<Store> retrieveStores() {
		String sql = "select * from store; ";
		List<Store> store = new ArrayList<>();
		
		try(Connection c = (ConnectionUse.getConnectionFromEnv())){
			// no user input taken, no need for prepared statement
			Statement s = c.createStatement();
			ResultSet rs = s.executeQuery(sql);
			
			while(rs.next()) {
				// extract each field from rs for each record, map them to a User object and add them to the users arraylist
				Store s = new Store();
				s.setId(rs.getInt("id"));
				s.setGenre(rs.getString("genre"));
				s.setGame(rs.getString("game"));
				s.setPrice(rs.getDouble("price"));
				
				store.add(s);
			}
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		return store;
	}

	@Override
	public Store retrieveStoreByStore(String genre) {
		String sql = "select * from store where genre  = ?;";
		Store s = null;
		
		try (Connection c = ConnectionUse.getConnectionFromEnv();){
			PreparedStatement ps = c.prepareStatement(sql);
			
			ps.setString(1, genre); // this refers to the 1st "?" in the sql string, allows to inject data

			ResultSet rs = ps.executeQuery();
			
			while(rs.next()) {
				s = new Store();
				s.setId(rs.getInt("id"));
				s.setGenre(rs.getString("genre"));
				s.setGame(rs.getString("game"));
				s.setPrice(rs.getDouble("price"));
			}
			
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		return s;
	}

	@Override
	public boolean updateStore(Store s) {
		String sql = "update store set genre = ?, game = ?, price = ?  where id = ?;";
		int rowsChanged = -1;
		
		try(Connection c = ConnectionUse.getConnectionFromEnv()){
			PreparedStatement ps = c.prepareStatement(sql);
			
			ps.setString(1, s.getGenre());
			ps.setString(2, s.getGame());
			ps.setDouble(3,s.getPrice());
			ps.setInt(4, s.getId());
			
			rowsChanged = ps.executeUpdate();
			
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		if(rowsChanged < 1) {
			return false;
		}
		return true;
	}

	@Override
	public boolean deleteStorebyid(int id) {
		String sql = "delete from store where id = ?;";
		int rowsChanged = -1;
		try(Connection c = ConnectionUse.getConnectionFromEnv()){
			PreparedStatement ps = c.prepareStatement(sql);
			
			ps.setInt(1, id);
			
			rowsChanged = ps.executeUpdate();
			
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

		if(rowsChanged < 1) {
			return false;
		}
		return true;
	}
	}

}
